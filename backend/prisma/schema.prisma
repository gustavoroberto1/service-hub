generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  NIVEL_1
  NIVEL_2
  NIVEL_3
}

enum AttendanceType {
  CORRECTIVE
  ADAPTIVE
  PREDICTIVE
  PREVENTIVE
}

enum Priorit {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum Status {
  OPEN
  PROCESSING
  VALIDATION
  COMPLETED
}

model User {
  id         String   @id
  name       String
  email      String   @unique
  password   String
  role       Role
  avatar     String?
  created_at DateTime
  updated_at DateTime @updatedAt

  created_attendances     Attendance[] @relation("created_by")
  responsible_attendances Attendance[] @relation("responsible")

  @@map("users")
}

model Client {
  id        String   @id
  name      String
  document  String   @unique
  phones    String[]
  emails    String[]
  is_active Boolean  @default(true)

  addresses  Address[]
  Attendance Attendance[]

  @@map("clients")
}

model Address {
  id           String @id
  postal_code  String
  state_code   String
  city         String
  neighborhood String
  street       String
  number       Int

  client    Client @relation(fields: [client_id], references: [id], onDelete: Restrict)
  client_id String

  @@map("addresses")
}

model Comment {
  id           String   @id
  author_id    String
  author_name  String
  author_email String
  text         String
  created_at   DateTime
  updated_at   DateTime @updatedAt

  attendance    Attendance @relation(fields: [attendance_id], references: [id], onDelete: Cascade)
  attendance_id String

  @@map("comments")
}

model Attendance {
  id                     String         @id
  title                  String
  description            String
  attendance_type        AttendanceType
  priorit                Priorit
  status                 Status
  estimate_hours         Int
  additional_observation String
  created_at             DateTime
  updated_at             DateTime       @updatedAt

  client    Client @relation(fields: [client_id], references: [id], onDelete: Restrict)
  client_id String

  created_by    User   @relation("created_by", fields: [created_by_id], references: [id], onDelete: Restrict)
  created_by_id String

  responsible    User?   @relation("responsible", fields: [responsible_id], references: [id], onDelete: SetNull)
  responsible_id String?

  comments Comment[]

  @@map("attendances")
}
